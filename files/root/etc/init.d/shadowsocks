#!/bin/sh /etc/rc.common
#
# Copyright (C) 2014-2017 Jian Chang <aa65535@live.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=90
STOP=15

NAME=shadowsocks
EXTRA_COMMANDS=rules

uci_get_by_name() {
	local ret=$(uci get $NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_bool_by_name() {
	case "$(uci_get_by_name $1 $2)" in
		1|on|true|yes|enabled) return 0;;
	esac
	return 1
}

validate_server() {
	[ "$(uci get $NAME.$1 2>/dev/null)" = "servers" ]
}

has_valid_server() {
	for server in $@; do
		validate_server $server && return 0
	done
	return 1
}

get_arg_out() {
	case "$(uci_get_by_type access_control self_proxy 1)" in
		1) echo "-o";;
		2) echo "-O";;
	esac
}

get_arg_tfo() {
	uci_bool_by_name $1 fast_open && echo "--fast-open"
}

get_arg_tnd() {
	uci_bool_by_name $1 no_delay && echo "--no-delay"
}

get_lan_hosts() {
	local tplservername=$(uci_get_by_name $1 server)
	local tplport=$(uci_get_by_name $tplservername tpl_local_port)
	[ $tplservername = "nil" ] || \
		echo "$(uci_get_by_name $1 type),$(uci_get_by_name $1 macaddr),$tplport"
}

get_plugin_config() {
	local plugin=$(uci_get_by_name $1 plugin)
	local plugin_opts=$(uci_get_by_name $1 plugin_opts)
	if [ -n "$plugin" ]; then
		echo $plugin >>/var/run/ss-plugin
		echo -e  "\n    \"plugin\": \"$plugin\","
		if [ -n "$plugin_opts" ]; then
			echo "    \"plugin_opts\": \"$plugin_opts\","
		fi
	fi
}

get_crypto_config() {
	local key=$(uci_get_by_name $1 key)
	local password=$(uci_get_by_name $1 password)
	if [ -n "$key" ]; then
		echo "\"key\": \"$key\","
	elif [ -n "$password" ]; then
		echo "\"password\": \"$password\","
	else
		logger -st $NAME -p3 "The password or key is not set."
	fi
}

#resolve domain to ip
#$1: domain or hostname
resolve_server_ip() {
	local host=$1
	if echo $host|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then         
		hostip=${host}
	elif  [ "$host" != "${host#*:[0-9a-fA-F]}" ] ;then
		hostip=${host}
	else
		hostip=`ping ${host} -s 1 -c 1 | grep PING | cut -d'(' -f 2 | cut -d')' -f1`
		if echo $hostip|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then
			hostip=${hostip}
		else
			hostip=`127.0.0.1`
		fi
	fi
	echo $hostip
}

#$1: server name by hash
get_server_ip_list() {
	local domain=$(uci_get_by_name $1 server)
	echo $(resolve_server_ip $domain)
}

get_server_port_list() {
	echo $(uci_get_by_name $1 tpl_local_port)	
}

#$1: server name by hash
gen_config_file() {
	local server_name=$(uci_get_by_name $1 server)
	local config_file=/var/etc/${NAME}.$1.json
	cat <<-EOF >$config_file
		{
			"server": "$(resolve_server_ip $server_name)",
			"server_port": $(uci_get_by_name $1 server_port),
			"local_address": "0.0.0.0",
			$(get_crypto_config $1)
		    "method": "$(uci_get_by_name $1 encrypt_method)",
		    $(get_plugin_config $1) 
			"timeout": $(uci_get_by_name $1 timeout 60),
			 "reuse_port": true
		}
	EOF
	echo $config_file
}

start_rules() {
	config_load $NAME
	local port_list=$(config_foreach get_server_port_list transparent_proxy_list)
	local default_port=$(echo $port_list | awk '{ print $1 }')
	/usr/bin/ss-rules \
		-s "$(config_foreach get_server_ip_list servers)" \
		-l "$default_port" \
		-p "$port_list" \
		-B "$(uci_get_by_type access_control wan_bp_list)" \
		-b "$(uci_get_by_type access_control wan_bp_ips)" \
		-W "$(uci_get_by_type access_control wan_fw_list)" \
		-w "$(uci_get_by_type access_control wan_fw_ips)" \
		-I "$(uci_get_by_type access_control lan_ifaces)" \
		-d "$(uci_get_by_type access_control lan_target)" \
		-a "$(config_foreach get_lan_hosts lan_hosts)" \
		-e "$(uci_get_by_type access_control ipt_ext)" \
		$(get_arg_out) -u
}

rules() {
	pidof ss-redir >/dev/null || return 0
	start_rules || /usr/bin/ss-rules -f
}

start_redir() {
	local server_cfg=$(uci_get_by_name $1 tpl_server)
	validate_server $server_cfg || return 0
	ss-redir -c $(gen_config_file $server_cfg) \
		-u \
		-l $(uci_get_by_name $1 tpl_local_port 1234) \
		--mtu $(uci_get_by_name $1 tpl_mtu 1492) \
		$(get_arg_tfo $server_cfg) $(get_arg_tnd $server_cfg) \
		-f /var/run/ss-redir-$server_cfg.pid
}

start() {
	command -v ss-redir >/dev/null 2>&1 || return 1
	mkdir -p /var/run /var/etc /var/etc/$NAME
	config_load $NAME
	config_foreach start_redir transparent_proxy_list
	rules
	/etc/init.d/dns-forwarder start
}

boot() {
	local delay=$(uci_get_by_type general startup_delay 0)
	(sleep $delay && start >/dev/null 2>&1) &
	return 0
}

kill_all() {
	kill -9 $(pidof $@) >/dev/null 2>&1
}

stop() {
	/usr/bin/ss-rules -f
	kill_all ss-redir
	/etc/init.d/dns-forwarder stop
}

